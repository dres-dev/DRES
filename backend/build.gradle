import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    ext.kotlinVersion = '1.4.0'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.8"
        classpath "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
    }
}
plugins {
    // id 'com.moowork.node'     version '1.3.1' // see https://github.com/srs/gradle-node-plugin/issues/292#issuecomment-562848790
    id 'com.github.node-gradle.node' version '2.2.0'
    id 'de.undercouch.download' version '4.0.4'
}
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'

mainClassName = 'dev.dres.DRES'

def frontendLocation = '../frontend'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions {
        freeCompilerArgs = ["-Xinline-classes"]
    }
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}


dependencies {

    def jettyVersion = '9.4.25.v20191220'
    def alpnApiVersion = '1.1.3.v20160715'
    def alpnBootVersion = '8.1.12.v20180117'

    ///// MapDB
    compile group: 'org.mapdb', name: 'mapdb', version: '3.0.8'


    ////// JLine 3
    compile group: 'org.jline', name: 'jline', version: '3.15.0'

    ////// Javalin
    compile group: 'io.javalin', name: 'javalin', version: '3.8.0'
    compile group: 'io.swagger.core.v3', name: 'swagger-core', version: '2.1.5'
    compile group: 'org.webjars', name: 'swagger-ui', version: '3.24.3'
    compile group: 'org.webjars.npm', name: 'js-tokens', version: '3.0.2'
    compile group: 'org.webjars.npm', name: 'redoc', version: '2.0.0-rc.2'
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.10.1'
    compile group: 'io.github.classgraph', name: 'classgraph', version: '4.8.34'
    compile group: 'org.eclipse.jetty.http2', name: 'http2-server', version: jettyVersion
    compile group: 'org.eclipse.jetty', name: 'jetty-alpn-conscrypt-server', version: jettyVersion
    compile group: 'org.eclipse.jetty.alpn', name: 'alpn-api', version: alpnApiVersion
    runtime group: 'org.mortbay.jetty.alpn', name: 'alpn-boot', version: alpnBootVersion

    ////// bcrypt
    compile group: 'org.mindrot', name: 'jbcrypt', version: '0.4'

    ////// CLIKT
    compile group: 'com.github.ajalt', name: 'clikt', version: '2.6.0'

    ///// Picnic
    compile group: 'com.jakewharton.picnic', name: 'picnic', version: '0.3.1'

    ////// CSV
    compile group: 'com.github.doyaaaaaken', name: 'kotlin-csv-jvm', version: '0.7.3'

    ////// Jaffree ffmpeg wrapper
    compile group: 'com.github.kokorin.jaffree', name: 'jaffree', version: '0.9.3'

    ////// Cache
    compile group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.8.6'

    ////// Log4J
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.13.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-jul', version: '2.13.1'

    ///// JUnit 5
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.2'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.2'

    ///// Kotlin
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlinVersion
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion

}

idea {
    module {
        downloadJavadoc = true
    }
}

sourceSets {
    main {
        resources {
            srcDir 'config'
        }
    }
}

node {
    version = '12.18.3'
    npmVersion = '6.14.6'

    download = true
    workDir = file("${project.projectDir}/../frontend/nodejs")
    npmWorkDir = file("${project.projectDir}/../frontend")
    nodeModulesDir = file("${project.projectDir}/../frontend")
}

task cleanFrontendResources(type: Delete) {
    delete 'src/main/resources/html'
    doLast {
        mkdir 'src/main/resources/html'
        new File('src/main/resources/html/index.html').text = " "
    }
}


task buildFrontend(type: NpmTask) {
    args = ['run', 'pbuild']
    dependsOn 'npm_install'
    /*command 'run'
    cmdArgs 'pbuild'
    npm {
        homeDirectory = frontendLocation
    }*/
}


task deployFrontend(type: Copy) {
    dependsOn 'cleanFrontendResources'
    dependsOn 'buildFrontend'
    tasks.findByName('buildFrontend').mustRunAfter 'cleanFrontendResources'
    from('../frontend/dist/dres-frontend')
    exclude '**/config.json'
    into('src/main/resources/html')
}

task deploy {
    dependsOn 'deployFrontend'
    dependsOn 'distZip'
    tasks.findByName('distZip').mustRunAfter 'deployFrontend'
}


task downloadFFmpeg(type: Download) {
    def f = new File('ffmpeg.zip')
    outputs.upToDateWhen {
        return f.exists()
    }

    def os = ""
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        os = "win"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        os = "osx"
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        os = "linux"
    }

    src "https://github.com/vot/ffbinaries-prebuilt/releases/download/v4.2.1/ffmpeg-4.2.1-$os-64.zip"
    dest f
}

task downloadFFprobe(type: Download) {
    def f = new File('ffprobe.zip')
    outputs.upToDateWhen {
        return f.exists()
    }


    def os = ""
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        os = "win"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        os = "osx"
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        os = "linux"
    }

    src "https://github.com/vot/ffbinaries-prebuilt/releases/download/v4.2.1/ffprobe-4.2.1-$os-64.zip"
    dest f

}

task downloadExt() {
    outputs.upToDateWhen {
        return file("ffmpeg.zip").exists()
    }
    outputs.upToDateWhen {
        return file("ffprobe.zip").exists()
    }
    dependsOn downloadFFmpeg
    dependsOn downloadFFprobe
}

task copyFFmpeg(type: Copy){
    outputs.upToDateWhen {
        return !fileTree('ext/ffmpeg').filter { it.isFile() && it.name.contains("ffmpeg")}.isEmpty()
    }
    from zipTree(downloadFFmpeg.dest)
    into 'ext/ffmpeg'
    include '*ffmpeg*'
}

task copyFFprobe(type: Copy){
    outputs.upToDateWhen {
        return !fileTree('ext/ffmpeg').filter { it.isFile() && it.name.contains("ffprobe")}.isEmpty()
    }
    from zipTree(downloadFFprobe.dest)
    into 'ext/ffmpeg'
    include '*ffprobe*'
}

task setupFFMpeg(type: Copy) {
    dependsOn downloadExt
    dependsOn copyFFmpeg
    dependsOn copyFFprobe
    tasks.findByName('copyFFmpeg').mustRunAfter 'downloadExt'
    tasks.findByName('copyFFprobe').mustRunAfter 'downloadExt'
}
