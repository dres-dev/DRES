buildscript {
    ext.kotlinVersion = '1.3.70'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.8"
        classpath "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
    }
}
plugins {
    id 'com.moowork.node'     version '1.3.1'
}
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'

mainClassName = 'dres.DRES'

def frontendLocation = '../frontend'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}


dependencies {

    def jettyVersion = '9.4.25.v20191220'
    def alpnApiVersion = '1.1.3.v20160715'
    def alpnBootVersion = '8.1.12.v20180117'

    ///// MapDB
    compile group: 'org.mapdb', name: 'mapdb', version: '3.0.8'

    /////// GRPC & ProtoBuf
    compile group: 'javax.annotation', name: 'javax.annotation-api', version: '1.2'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.7.1'
    compile group: 'io.grpc', name: 'grpc-all', version: '1.20.0'

	////// JLine 3
	compile group: 'org.jline', name: 'jline', version: '3.12.1'
	
	////// Javalin
	compile group: 'io.javalin', name: 'javalin', version: '3.8.0'
    compile group: 'io.swagger.core.v3', name: 'swagger-core', version: '2.0.9'
    compile group: 'org.webjars', name: 'swagger-ui', version: '3.24.3'
    compile group: 'org.webjars.npm', name: 'js-tokens', version: '3.0.2'
    compile group: 'org.webjars.npm', name: 'redoc', version: '2.0.0-rc.2'
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.10.1'
    compile group: 'io.github.classgraph', name: 'classgraph', version: '4.8.34'
    compile group: 'org.eclipse.jetty.http2', name:'http2-server', version: jettyVersion
    compile group: 'org.eclipse.jetty', name: 'jetty-alpn-conscrypt-server', version: jettyVersion
    compile group: 'org.eclipse.jetty.alpn', name: 'alpn-api', version: alpnApiVersion
    runtime group: 'org.mortbay.jetty.alpn', name: 'alpn-boot', version: alpnBootVersion

    ////// bcrypt
    compile group: 'org.mindrot', name: 'jbcrypt', version: '0.4'

    ////// CLIKT
    compile group: 'com.github.ajalt', name: 'clikt', version: '2.6.0'

    ////// CSV
    compile group: 'com.github.doyaaaaaken', name: 'kotlin-csv-jvm', version: '0.7.3'

    ////// Jaffree ffmpeg wrapper
    compile group: 'com.github.kokorin.jaffree', name: 'jaffree', version: '0.9.3'

    ////// Log4J
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.13.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-jul', version: '2.13.1'

    ///// JUnit 5
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.2'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.2'

    ///// Kotlin
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlinVersion
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion
    compile group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: '1.3.2'
}

idea {
    module {
        downloadJavadoc = true
    }
}

sourceSets {
    main {
        resources {
            srcDir 'config'
        }
    }
}

node {
    version = '12.16.3'
    npmVersion = '6.14.4'

    download = true
    workDir = file("${project.projectDir}/../frontend/nodejs")
    npmWorkDir = file("${project.projectDir}/../frontend")
    nodeModulesDir = file("${project.projectDir}/../frontend")
}

npm_install.dependsOn(npm_cache_clean)

task buildFrontend(type: NpmTask){
    args = ['run', 'pbuild']
    dependsOn 'initFrontendDev'
    /*command 'run'
    cmdArgs 'pbuild'
    npm {
        homeDirectory = frontendLocation
    }*/
}

task deployFrontend(type: Copy){
    // TODO Frontend config adjustment
    dependsOn 'buildFrontend'
    from('../frontend/dist/dres-frontend')
    into('src/main/resources/html')
}
