import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    ext.kotlinVersion = '1.7.20'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
    }
}

apply plugin: 'application'
apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-kapt'
apply plugin: 'idea'

mainClassName = 'dev.dres.DRES'
sourceCompatibility = 11

/* Configuration for frontend classpath files (see dependencies). */
configurations {
    frontendClasspath {
        canBeConsumed = false
        canBeResolved = true
    }
}

repositories {
    mavenCentral()
    maven { url 'https://maven.reposilite.com/snapshots' } //javalin openapi snapshot
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
    kotlinOptions {
        freeCompilerArgs = ["-Xinline-classes"]
    }
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

dependencies {
    def javalin = '5.1.2'
    def log4jVersion = '2.17.1'

    ///// Frontend files (produced by sub-project).
    implementation frontendClasspath(project(path: ":frontend", configuration: 'frontendFiles'))

    ///// FFMpeg dependency
    implementation files("$buildDir/ext") {builtBy 'setupFFMpeg'}

    ///// MapDB
    implementation group: 'org.mapdb', name: 'mapdb', version: '3.0.8'

    ////// Javalin
    implementation group: 'io.javalin', name:  'javalin', version: javalin
    kapt("io.javalin.community.openapi:openapi-annotation-processor:5.1.2-SNAPSHOT")

    implementation group: 'io.javalin.community.openapi', name: 'javalin-openapi-plugin', version: "5.1.2-SNAPSHOT"
    implementation group: 'io.javalin.community.openapi', name:'javalin-swagger-plugin', version: "5.1.2-SNAPSHOT"
    implementation group: 'io.javalin.community.ssl', name: 'ssl-plugin', version: javalin

    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.13.4'




    ////// bcrypt
    implementation group: 'org.mindrot', name: 'jbcrypt', version: '0.4'

    ////// JLine 3, Clikt & Picnic for optimal terminal experience :-)
    implementation group: 'com.github.ajalt', name: 'clikt', version: '2.8.0'
    implementation group: 'org.jline', name: 'jline-terminal', version: '3.20.0'
    implementation group: 'org.jline', name: 'jline-terminal-jna', version: '3.20.0'
    implementation group: 'org.jline', name: 'jline-reader', version: '3.20.0'
    implementation group: 'org.jline', name: 'jline-builtins', version: '3.20.0'
    implementation group: 'com.jakewharton.picnic', name: 'picnic', version: '0.5.0'


    ///// Fuel
    implementation group: 'com.github.kittinunf.fuel', name: 'fuel', version: '2.3.1'

    ////// CSV
    implementation group: 'com.github.doyaaaaaken', name: 'kotlin-csv-jvm', version: '0.7.3'

    ////// Jaffree ffmpeg wrapper
    implementation group: 'com.github.kokorin.jaffree', name: 'jaffree', version: '0.9.3'

    ////// Cache
    implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.8.6'

    ////// Log4J
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: log4jVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-jul', version: log4jVersion

    ///// JUnit 5
    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5"

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.7.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.0'

    ///// Kotlin
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlinVersion
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion
}

kapt {
    correctErrorTypes true
}

test {
    useJUnitPlatform()
}

idea {
    module {
        downloadJavadoc = true
    }
}

sourceSets {
    main {
        resources {
            srcDir 'config'
        }
    }
}

distributions {
    main {
        distributionBaseName = 'dres-dist'
    }
}

/** Custom tasks: FFmpeg Download and deployment. */

task downloadFFmpeg(type: Download) {
    def f = new File("$buildDir/cache/ffmpeg.zip")
    outputs.upToDateWhen {
        return f.exists()
    }

    def os = ""
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        os = "win"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        os = "osx"
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        os = "linux"
    }

    src "https://github.com/vot/ffbinaries-prebuilt/releases/download/v4.2.1/ffmpeg-4.2.1-$os-64.zip"
    dest f
}

task downloadFFprobe(type: Download) {
    def f = new File("$buildDir/cache/ffprobe.zip")
    outputs.upToDateWhen {
        return f.exists()
    }

    def os = ""
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        os = "win"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        os = "osx"
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        os = "linux"
    }

    src "https://github.com/vot/ffbinaries-prebuilt/releases/download/v4.2.1/ffprobe-4.2.1-$os-64.zip"
    dest f
}

task copyFFmpeg(type: Copy) {
    dependsOn downloadFFmpeg
    outputs.upToDateWhen {
        return !fileTree("$buildDir/ext/ffmpeg").filter { it.isFile() && it.name.startsWith('ffmpeg')}.isEmpty()
    }
    from zipTree(downloadFFmpeg.dest)
    into "$buildDir/ext/ffmpeg"
    include '*ffmpeg*'
}

task copyFFprobe(type: Copy) {
    dependsOn downloadFFprobe
    outputs.upToDateWhen {
        return !fileTree("$buildDir/ext/ffmpeg").filter { it.isFile() && it.name.startsWith('ffprobe') }.isEmpty()
    }
    from zipTree(downloadFFprobe.dest)
    into "$buildDir/ext/ffmpeg"
    include '*ffprobe*'
}

task setupFFMpeg(type: Copy) {
    dependsOn downloadFFmpeg
    dependsOn downloadFFprobe
    dependsOn copyFFmpeg
    dependsOn copyFFprobe
}

startScripts {
    doLast {
        windowsScript.text = windowsScript.text.replaceAll('set CLASSPATH=.*', 'set CLASSPATH=.;%APP_HOME%/lib/*')
    }
}
